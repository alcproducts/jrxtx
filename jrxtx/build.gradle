version = '1.0.1.1-alc'
group = 'org.openmuc'

dependencies {
    compile project(':gnu-io')
    testCompile project(':gnu-io').sourceSets.main.output
}

jar {
    from project(':gnu-io').sourceSets.main.output

    manifest {
        attributes('Export-Package': 'org.openmuc.jrxtx, gnu.io')
        attributes('Bundle-Name': 'jRxTx')
        attributes('Bundle-SymbolicName': project.group+'.'+project.name)
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://plugins.gradle.org/m2/")
            pom.project {
                name "jRxTx"
                description "jRxTx is a library for Java serial communication."
        
                licenses {
                    license {
                        name "GNU Lesser General Public License 2.1 or later + linking exception"
                        url "http://www.gnu.org/licenses/lgpl-2.1.html"
                        distribution "repo"
                    }
                }
            }
        }
    }
}

// This task was customized to organize the bundled native libraries to allow
// support for multiple linux architectures.
// Install the native libs with the desired relative pathing in native/alc
// to incorporate them into the jar via the buildWithNative task.
task copyNativeLibs(type: Copy) {
	def libSourceDir = "${project.rootDir}/native/alc"
    def resDir = project(':jrxtx').sourceSets.main.output.resourcesDir

    from libSourceDir
    into resDir.absolutePath + '/libs'

    // The resulting Manifest was missing Bundle-NativeCode, so the native libraries could not be loaded in an osgi context
    // credits to b-dreissigacker
    def Set<String> bundleNativeLibs = []
    def String bundleNativeCode

    doLast {
		def Set<File> libs
		libs = fileTree(dir: resDir).files
        libs.each {
			def arch = it.getParentFile().getName()
			def os = it.getParentFile().getParentFile().getName()
			def bundle = (arch.equalsIgnoreCase("windows")) ?
                    "libs/${arch}/${it.getName()};osname=win32;processor=x86-64" :
                    "libs/${os}/${arch}/${it.getName()};osname=${os};processor=${arch}"
			bundleNativeLibs.add(bundle)
        }

        bundleNativeCode = bundleNativeLibs.join(',')
        if(bundleNativeCode.length() > 0) {
            jar {
                manifest {
                    attributes('Bundle-NativeCode': bundleNativeCode)
                }
            }
        }
    }
}

task(buildWithNative) {
    dependsOn(copyNativeLibs)
    dependsOn(jar)
    tasks.findByName("jar").mustRunAfter "copyNativeLibs"
}

tasks.withType(Test) {
    dependsOn copyNativeLibs
    mustRunAfter copyNativeLibs
}

task copyJavadoc(type: Sync, dependsOn: "javadoc") {
    from "${project(':jrxtx').docsDir.getAbsolutePath()}/javadoc/"
    into "${project.rootDir}/docs/javadoc/"
}
